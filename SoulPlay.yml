AWSTemplateFormatVersion: 2010-09-09
Description: SoulPlay
Parameters : 

    KeyName: 
      Description : "Name of an existing EC2 KeyPair to enable SSH access to the instances"
      Type: "AWS::EC2::KeyPair::KeyName"
      ConstraintDescription : "must be the name of an existing EC2 KeyPair."
    VolumeSize: 
      Description : "Volume size of the instances"
      Type : "Number"
      ConstraintDescription : "30gb"  
        
Mappings:
  RegionMap:
    
    us-west-2:
     "AMI": "ami-08e93a9522bbe6df6"

Resources:
  VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 172.16.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: Support Ticket Project

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Support Ticket Project

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.16.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Support Ticket Project Public Subnet (AZ1)

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 172.16.11.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Support ticket Project Private Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Support Ticket Project Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PrivateSubnet
      
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0 and ssh
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0  
      VpcId: !Ref VPC 
      
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t4g.micro
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      KeyName:  !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
           VolumeSize: !Ref VolumeSize  
      Tags:
       - Key: Name
         Value: Support Ticket Project EC2     
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install -y lamp-mariadb10.8.3-php8 php8
            yum install -y httpd mariadb-server nginx
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;
            echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
Outputs:
  PublicIp:
    Description: EC2 Instance Public Ip
    Value: !GetAtt EC2Instance.PublicIp